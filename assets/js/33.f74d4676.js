(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{433:function(_,v,t){"use strict";t.r(v);var l=t(56),e=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"数据对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据对象"}},[_._v("#")]),_._v(" 数据对象")]),_._v(" "),t("h2",{attrs:{id:"定位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定位"}},[_._v("#")]),_._v(" 定位")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("路径   : core/model/")])]),_._v(" "),t("li",[t("p",[_._v("文件名称: DataObject.php")])]),_._v(" "),t("li",[t("p",[_._v("github路径: https://github.com/skygreen2001/betterlife/blob/master/core/model/DataObject.php")])]),_._v(" "),t("li",[t("p",[_._v("每个数据对象都继承它，可以使用"),t("RouterLink",{attrs:{to:"/core/dataobject/normalmethod.html"}},[_._v("数据对象通用方法")]),_._v("里说明的方法直接执行数据库的操作")],1)])]),_._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[_._v("#")]),_._v(" 概述")]),_._v(" "),t("ul",[t("li",[_._v("数据库里的每张表对应一个数据对象")]),_._v(" "),t("li",[_._v("表名定义规则:库名缩写+“"),t("em",[_._v('”+目录名+"')]),_._v('"+类名[头字母小写]\n'),t("ul",[t("li",[_._v("如博客表名定义为  : bb_core_blog")]),_._v(" "),t("li",[_._v("那么博客数据对象即: Blog[头字母大写]")])])])]),_._v(" "),t("h2",{attrs:{id:"数据模型层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据模型层"}},[_._v("#")]),_._v(" 数据模型层")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("数据对象类定义都放置在前台, 如示例就放置在根路径[home/betterlife/src/domain]路径下, 数据模型层详细描述可参考"),t("RouterLink",{attrs:{to:"/core/mvc/model.html"}},[_._v("Model")]),_._v("定义说明。")],1)]),_._v(" "),t("li",[t("p",[_._v("以下示例中提到的Blog、Comment、Role、Userdetail和User等类的定义都放置在该路径下的文件里；如Blog.php放置在:[home/betterlife/src/domain/core/Blog.php]。")])])]),_._v(" "),t("h2",{attrs:{id:"基本定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本定义"}},[_._v("#")]),_._v(" 基本定义")]),_._v(" "),t("p",[_._v("数据对象的属性定义包括以下两种方式:")]),_._v(" "),t("ol",[t("li",[_._v("所有的列定义的对象属性都是private, 同时定义setter和getter方法。包括属性和属性的set和get方法定义。")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[_._v("- 这是现在Java实体类定义的主流方式, 在框架开发之处, 实体类采用这种定义方式, 现在作为默认保留数据对象的方式。\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[_._v("所有的列定义的对象属性都是public。")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[_._v("- 现在框架里数据对象都采用这种方式，它被证明在php里更为通用使用，已被框架默认为系统使用的方式；例如代码一键生成中生成的数据对象实体类定义就采用这种方式。\n")])])]),t("h2",{attrs:{id:"关系定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系定义"}},[_._v("#")]),_._v(" 关系定义")]),_._v(" "),t("p",[_._v("相对于"),t("RouterLink",{attrs:{to:"/core/database/database_define.html"}},[_._v("数据库定义")]),_._v("表关系定义,数据对象的关系定义如下:")],1),_._v(" "),t("ul",[t("li",[t("p",[_._v("一对一[has_one]")]),_._v(" "),t("ul",[t("li",[_._v("例如示例项目中\n"),t("ul",[t("li",[_._v("主数据对象:User")]),_._v(" "),t("li",[_._v("从数据对象:Userdetail")]),_._v(" "),t("li",[_._v("用户[主数据对象]和用户详情[从数据对象]就是一对一关系")])])])])]),_._v(" "),t("li",[t("p",[_._v("一对多[has_many]")]),_._v(" "),t("ul",[t("li",[_._v("例如示例项目中\n"),t("ul",[t("li",[_._v("主数据对象:Blog")]),_._v(" "),t("li",[_._v("从数据对象:Comment")]),_._v(" "),t("li",[_._v("博客[主数据对象]和评论[从数据对象]就是一对多关系")])])])])]),_._v(" "),t("li",[t("p",[_._v("多对多[many_many]")]),_._v(" "),t("ul",[t("li",[_._v("例如示例项目中\n"),t("ul",[t("li",[_._v("主数据对象:User")]),_._v(" "),t("li",[_._v("从数据对象:Role")]),_._v(" "),t("li",[_._v("多对多关系数据对象:Userrole")]),_._v(" "),t("li",[_._v("用户[主数据对象]和角色[从数据对象]就是多对多关系")])])])])])]),_._v(" "),t("p",[_._v("并根据实际开发需要定义了附属的关系形态:")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("从属于一对一[belong_has_one]")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("即从表中一字段关联主表中的主键")])]),_._v(" "),t("li",[t("p",[_._v("例如示例项目中")]),_._v(" "),t("ul",[t("li",[_._v("主数据对象:User")]),_._v(" "),t("li",[_._v("从数据对象:Userdetail")]),_._v(" "),t("li",[_._v("用户详情[从数据对象]和用户[主数据对象]就是从属于一对一关系")]),_._v(" "),t("li",[_._v("在从表中存在字段user_id关联主表中的主键")])])])])]),_._v(" "),t("li",[t("p",[_._v("从属于多对多[belongs_many_many]")]),_._v(" "),t("ul",[t("li",[_._v("例如示例项目中\n"),t("ul",[t("li",[_._v("主数据对象:User")]),_._v(" "),t("li",[_._v("从数据对象:Role")]),_._v(" "),t("li",[_._v("多对多关系数据对象:Userrole")]),_._v(" "),t("li",[_._v("角色[从数据对象]和用户[主数据对象]就是从属于多对多关系")])])])])]),_._v(" "),t("li",[t("p",[_._v("多对多分解成一对多")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("在将关系型数据库的表转换成面向对象的类进行代码的开发处理之后，作为开发者，我们往往发现，多对多都会分解为一对多来进行处理。")])]),_._v(" "),t("li",[t("p",[_._v("例如示例项目中")]),_._v(" "),t("ul",[t("li",[_._v("主数据对象:User")]),_._v(" "),t("li",[_._v("从数据对象:Role")]),_._v(" "),t("li",[_._v("多对多关系数据对象:Userrole")]),_._v(" "),t("li",[_._v("用户[主数据对象]和角色[从数据对象]就是多对多关系")])])]),_._v(" "),t("li",[t("p",[_._v("在这里:")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("用户[主数据对象]和多对多关系数据对象的关系是一对多的关系")])]),_._v(" "),t("li",[t("p",[_._v("角色[从数据对象]和多对多关系数据对象的关系是一对多的关系")])]),_._v(" "),t("li",[t("p",[_._v("也就是说通过一个用户可以找到多个角色, 通过一个角色可以找到多个用户")])]),_._v(" "),t("li",[t("p",[_._v("在实际的开发中，多对多关系往往更多的是使用这种一对多的方式进行处理。")])])])])])])]),_._v(" "),t("ul",[t("li",[_._v("对数据对象的关系定义可参考"),t("RouterLink",{attrs:{to:"/core/dataobject/dataobjectspec.html"}},[_._v("数据对象规格说明")]),_._v(";")],1),_._v(" "),t("li",[_._v("对数据对象的关系定义变量参见类: DataObjectSpec, 对数据对象的关系定义实现参见类: DataObjectRelation。")])]),_._v(" "),t("h2",{attrs:{id:"高级定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级定义"}},[_._v("#")]),_._v(" 高级定义")]),_._v(" "),t("ul",[t("li",[_._v("所有数据实体类如POJO的父类")]),_._v(" "),t("li",[_._v("该实体类设计为ActiveRecord模式。")]),_._v(" "),t("li",[_._v("可直接在对象上操作CRUD增删改查操作")]),_._v(" "),t("li",[_._v("查主要为: 根据主键和名称查找对象、总记录数和分页查找等常规方法。")])]),_._v(" "),t("p",[_._v("更多高级定义情参考"),t("RouterLink",{attrs:{to:"/core/dataobject/dataobjectspec.html"}},[_._v("数据对象规格说明")])],1)])}),[],!1,null,null,null);v.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{434:function(n,e,a){"use strict";a.r(e);var r=a(56),t=Object(r.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"通用方法详细说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用方法详细说明"}},[n._v("#")]),n._v(" 通用方法详细说明")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("数据对象通用方法都定义在类"),a("code",[n._v("DataObject")]),n._v("和"),a("code",[n._v("DataObjectFunc")]),n._v("里")])]),n._v(" "),a("li",[a("p",[n._v("DataObject")]),n._v(" "),a("ul",[a("li",[n._v("路径   : core/model/")]),n._v(" "),a("li",[n._v("文件名称: DataObject.php")]),n._v(" "),a("li",[n._v("github路径: https://github.com/skygreen2001/betterlife/blob/master/core/model/DataObject.php")])])]),n._v(" "),a("li",[a("p",[n._v("DataObjectFunc")]),n._v(" "),a("ul",[a("li",[n._v("路径   : core/model/")]),n._v(" "),a("li",[n._v("文件名称: DataObjectFunc.php")]),n._v(" "),a("li",[n._v("github路径: https://github.com/skygreen2001/betterlife/blob/master/core/model/dataobject/DataObjectFunc.php")])])])]),n._v(" "),a("h2",{attrs:{id:"定义通用方法列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义通用方法列表"}},[n._v("#")]),n._v(" 定义通用方法列表")]),n._v(" "),a("p",[n._v("定义通用方法分为两类: 实例方法和类方法。")]),n._v(" "),a("h3",{attrs:{id:"实例方法【需实例化数据对象】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法【需实例化数据对象】"}},[n._v("#")]),n._v(" 实例方法【需实例化数据对象】")]),n._v(" "),a("p",[n._v("一般来讲数据对象的增删改定义为实例方法")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("save: 保存数据对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public function save()\n函数说明:\n   * @example 示例如下\n   * 示例如下:\n   * \n   *       $user   = new User();\n   *       $user->setUsername( "betterlife" );\n   *       $user->setPassword( "123456" );\n   *       $user_id = $user->save();\n   * @return int 保存对象记录的ID标识号\n')])])])]),n._v(" "),a("li",[a("p",[n._v("update: 更新数据对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public function update()\n函数说明:\n   * @example 示例如下\n   * 示例如下:\n   * \n   *       $user             = User::getById( 3 );\n   *       $user["username"] = "shanghai";\n   *       $user->update();\n   * @return boolen 是否更新成功；true为操作正常\n')])])])]),n._v(" "),a("li",[a("p",[n._v("saveOrUpdate: 保存或修改数据对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public function saveOrUpdate()\n函数说明:\n   * @example 示例如下\n   * \n   *       $user     = User::getById( 3 );\n   *       $user["username"] = "shanghai";\n   *       $user_id          = $user->saveOrUpdate();\n   * @return boolen 是否保存或更新成功；true为操作正常\n')])])])]),n._v(" "),a("li",[a("p",[n._v("delete: 删除数据对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义: public function delete()\n函数说明: \n    * @example 示例如下\n    * \n    *       $user     = User::getById( 3 );\n    *       $isDelete = $user->delete();\n    * @return boolen 是否删除成功；true为操作正常\n")])])])])]),n._v(" "),a("h3",{attrs:{id:"类方法【静态方法】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类方法【静态方法】"}},[n._v("#")]),n._v(" 类方法【静态方法】")]),n._v(" "),a("p",[n._v("一般来讲数据对象的查询定义为类方法")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("updateProperties: 更新对象指定的属性")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function updateProperties($sql_ids, $array_properties)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isUpdate = User::updateProperties( "1, 2", "loginTimes = 100" );\n   * @param array|string $sql_ids 需更新数据的ID编号或者ID编号的Sql语句\n   * 示例如下: \n   * \n   *        1. 1, 2, 3\n   *        2. array(1, 2, 3)\n   * \n   * @param string $array_properties 指定的属性\n   * 示例如下: \n   * \n   *        1. pass = 1, name = \'sky\'\n   *        2. array("pass" => "1", "name" => "sky")\n   * @return boolen 是否更新成功；true为操作正常\n')])])])]),n._v(" "),a("li",[a("p",[n._v("updateBy: 根据条件更新数据对象指定的属性")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function updateBy($filter, $array_properties)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isUpdate = User::updateBy( "username = \'admin\'", "loginTimes = 500" );\n   * @param mixed $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $array_properties 指定的属性\n   * 示例如下: \n   * \n   *        1. pass = 1, name = \'sky\'\n   *        2. array("pass" => "1", "name" => "sky")\n   * @return boolen 是否更新成功；true为操作正常\n')])])])]),n._v(" "),a("li",[a("p",[n._v("deleteByID: 由标识删除指定ID数据对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义:public static function deleteByID($id)\n函数说明:\n   * @example 示例如下\n   * \n   *       $isDelete = User::deleteByID( 4 );\n   * @param mixed $id 数据对象编号\n   * @return boolen 是否修改成功\n")])])])]),n._v(" "),a("li",[a("p",[n._v("deleteByIds: 根据主键删除多条记录")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function deleteByIds($ids)\n函数说明:\n   * @example 示例如下\n   * \n   *       $isDelete = User::deleteByIds( "5, 6, 7" );\n   * @param array|string $ids 数据对象编号\n   * \n   * 形式如下:\n   *     1. array: array(1, 2, 3, 4, 5)\n   *     2. 字符串: 1, 2, 3, 4\n   * @return boolen 是否修改成功\n')])])])]),n._v(" "),a("li",[a("p",[n._v("deleteBy: 根据条件删除多条记录")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function deleteBy($filter)\n函数说明:\n   * @example 示例如下\n   * \n   *       $isDelete = User::deleteBy( "username = \'betterlife7\'" );\n   * @param mixed $filter 查询条件, 在where后的条件\n   * @example 示例如下: \n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @return boolen 是否修改成功\n')])])])]),n._v(" "),a("li",[a("p",[n._v("increment: 对属性进行递增")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function increment($property_name, $incre_value = 1, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isPlus = User::increment( "loginTimes", 5, "user_id > 1" );\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @param string property_name 属性名称\n   * @param int incre_value 递增数\n   * @return boolen 是否修改成功\n')])])])]),n._v(" "),a("li",[a("p",[n._v("decrement: 对属性进行递减")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function decrement($property_name, $decre_value = 1, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isMinus = User::decrement( "loginTimes", 3, "user_id > 1" );\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @param string property_name 属性名称\n   * @param int decre_value 递减数\n   * @return boolen 是否修改成功\n')])])])]),n._v(" "),a("li",[a("p",[n._v("existByID: 由标识判断指定ID数据对象是否存在")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义: public static function existByID($id)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isExist = User::existByID( 1 );\n   * @param mixed $id 数据对象编号\n   * @return bool 是否存在\n")])])])]),n._v(" "),a("li",[a("p",[n._v("existBy: 判断符合条件的数据对象是否存在")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function existBy($filter)\n函数说明:\n   * @example 示例如下\n   * \n   *        $isExist = User::existBy( "username = \'china\'" );\n   * @param mixed $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @return bool 是否存在\n')])])])]),n._v(" "),a("li",[a("p",[n._v("select: 查询当前对象需显示属性的列表")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function select($columns, $filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID, $limit = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blog_names = Blog::select( "blog_name" );\n   * @param string $columns指定的显示属性, 同SQL语句中的Select部分。\n   * 示例如下: \n   * \n   *        id,name,commitTime\n   * \n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * \n   * @param string $limit 分页数量:limit起始数被改写, 默认从1开始, 如果是0, 同Mysql limit语法；\n   * 示例如下: \n   * \n   *    6, 10  从第6条开始取10条(如果是mysql的limit, 意味着从第五条开始, 框架里不是这个意义。)\n   *    1, 10 (相当于第1-第10条)\n   *    10 (相当于第1-第10条)\n   * \n   * @return 查询列数组, 当只有一个值的时候如select count(表名_id), 自动从数组中转换出来值字符串\n')])])])]),n._v(" "),a("li",[a("p",[n._v("selectOne: 查询当前对象单个需显示的属性")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function selectOne($columns, $filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blog_name = Blog::selectOne( "blog_name" );\n   * @param string 指定的显示属性, 同SQL语句中的Select部分。\n   * 示例如下: \n   * \n   *        id, name, commitTime\n   * \n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 示例如下: \n   *        1. id asc;\n   *        2. name desc;\n   * @return 查询列数组, 自动从数组中转换出来值字符串,最后只返回一个值\n')])])])]),n._v(" "),a("li",[a("p",[n._v("get: 查询数据对象列表")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function get($filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID, $limit = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blogs = Blog::get();\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * \n   * @param string $limit 分页数量:limit起始数被改写, 默认从1开始, 如果是0, 同Mysql limit语法；\n   * 示例如下: \n   * \n   *    6, 10  从第6条开始取10条(如果是mysql的limit, 意味着从第五条开始, 框架里不是这个意义。)\n   *    1, 10 (相当于第1-第10条)\n   *    10 (相当于第1-第10条)\n   * \n   * @return array 对象列表数组\n')])])])]),n._v(" "),a("li",[a("p",[n._v("getOne: 查询得到单个对象实体")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function getOne($filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blog = Blog::getOne();\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 示例如下:\n   *        1. id asc;\n   *        2. name desc;\n   * @return object 单个对象实体\n')])])])]),n._v(" "),a("li",[a("p",[n._v("getById: 根据表ID主键获取指定的对象")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义: public static function getById($id)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blog = Blog::getById( 1 );\n   * @param string $id 数据对象编号\n   * @return 数据对象\n")])])])]),n._v(" "),a("li",[a("p",[n._v("count: 数据对象总计数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function count($filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $countBlogs = Blog::count( "blog_id>3" );\n   * @param object|string|array $filter\n   *        $filter 格式示例如下: \n   *            0. "id = 1, name = \'sky\'"\n   *            1. array("id = 1", "name = \'sky\'")\n   *            2. array("id" => "1", "name" => "sky")\n   *            3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @return int 对象总计数\n')])])])]),n._v(" "),a("li",[a("p",[n._v("queryPage: 数据对象分页")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function queryPage($startPoint, $endPoint, $filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * \n   *        $blogs = Blog::queryPage( 0, 10,\n   *            array(\n   *                "(blog_content like \'%关键字%\' or blog_content like \'%公开课%\')",\n   *                "blog_id<4",\n   *                "user_id"=>1\n   *            )\n   *        );\n   * @param int $startPoint  分页开始记录数\n   * @param int $endPoint    分页结束记录数\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * @param string $sort 排序条件\n   * 默认为 id desc\n   * \n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * @return mixed 对象分页\n')])])])]),n._v(" "),a("li",[a("p",[n._v("queryPageByPageNo: 数据对象分页根据当前页数和每页显示记录数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function queryPageByPageNo($pageNo, $filter = null, $pageSize = 10, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * 示例如下:\n   * \n   *        $blogs = Blog::queryPageByPageNo( 1, null, 3 );\n   * @param int $pageNo  当前页数\n   * @param int $pageSize 每页显示记录数\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 默认为 id desc\n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * \n   * @return array\n   *  返回:\n   *        - count    : 符合条件的记录总计数\n   *        - pageCount: 符合条件的总页数\n   *        - data     : 对象分页\n')])])])])]),n._v(" "),a("h3",{attrs:{id:"其他实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他实例方法"}},[n._v("#")]),n._v(" 其他实例方法")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("toXml: 数据对象转换成xml字符串")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public function toXml($isAll = true, $filterArray = null)\n函数说明:\n   * @example 示例如下\n   *         $blog = Blog::getById( 1 );\n   *         print_r( $blog->toXml() );\n   * @param $filterArray 需要过滤不生成的对象的field\n   * 示例: $filterArray = array("id", "commitTime");\n   * @param $isAll 是否对象所有的field都要生成，包括没有内容或者内容为空的field\n   * @return string xml内容\n')])])])]),n._v(" "),a("li",[a("p",[n._v("toJson: 数据对象转换成Json字符串")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义: public function toJson($isAll = false)\n函数说明:\n   * @example 示例如下\n   *         $blog = Blog::getById( 1 );\n   * @param $isAll 是否对象所有的field都要生成，包括没有内容或者内容为空的field\n   * @return string Json格式的数据格式的字符串。\n")])])])]),n._v(" "),a("li",[a("p",[n._v("toArray: 数据对象转换成数组")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数定义: public function toArray($isAll = true)\n函数说明:\n   * 示例如下:\n   * \n   *         $blog = Blog::getById( 1 );\n   * \n   *         print_r( $blog->toArray() );\n   * @param $isAll 是否对象所有的field都要生成，包括没有内容或者内容为空的field\n   * @return 数组\n")])])])]),n._v(" "),a("li",[a("p",[n._v("saveRelationForManyToMany: [数据对象多对多存储]")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public function saveRelationForManyToMany($relation_object, $relation_id_value, $other_column_values = null)\n函数说明:\n   * \n   * @example 示例如下:\n   * \n   * 示例1【多对多-主控端】: \n   * \n   *      $user = new User();\n   * \n   *      $user->setId(2);\n   * \n   *      $user->saveRelationForManyToMany( "roles", "3", array("commitTime" => date("Y-m-d H:i:s")) );\n   * \n   *      说明:roles是在User数据对象中定义的变量: \n   * \n   *      static $many_many = array(\n   * \n   *          "roles" => "Role",\n   * \n   *      );\n   * \n   * 示例2【多对多-被控端】: \n   * \n   *      $role = new Role();\n   * \n   *      $role->setId(5);\n   * \n   *      $role->saveRelationForManyToMany( "users", "6", array("commitTime" => date("Y-m-d H:i:s")) );\n   * \n   *      说明:users是在Role数据对象中定义的变量: \n   * \n   *      static $belongs_many_many = array(\n   * \n   *          "users" => "User",\n   * \n   *      );\n   * \n   * @param mixed $relation_object 多对多|从属于多对多关系定义对象\n   * @param mixed $relation_id_value 关系对象的主键ID值。\n   * @param array $other_column_values 其他列值键值对【冗余字段便于查询的数据列值】, 如有一列: 记录关系创建时间。\n   * @return mixed 保存对象后的主键\n')])])])])]),n._v(" "),a("h3",{attrs:{id:"其他类方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他类方法"}},[n._v("#")]),n._v(" 其他类方法")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("max: 获取数据对象指定属性[表列]最大值")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function max($column_name = null, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $max = User::max( "loginTimes" );\n   * @param string $column_name 列名, 默认为数据对象标识\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * @return int 数据对象标识最大值\n')])])])]),n._v(" "),a("li",[a("p",[n._v("min: 获取数据对象指定属性[表列]最小值")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function min($column_name = null, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $min = User::min( "loginTimes" );\n   * @param string $column_name 列名, 默认为数据对象标识\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * @return int 数据对象列名最小值, 如未指定列名, 为标识最小值\n')])])])]),n._v(" "),a("li",[a("p",[n._v("sum: 获取数据对象指定属性[表列]总和")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function sum($column_name = null, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $sum = User::sum( "loginTimes" );\n   * @param string $column_name 列名\n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * @return int 数据对象列名总数\n')])])])]),n._v(" "),a("li",[a("p",[n._v("countMultitable: 对象总计数[多表关联查询]")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function countMultitable($from, $filter = null)\n函数说明:\n   * @example 示例如下\n   * \n   *        $comments = Comment::countMultitable( "Blog a, Comment b", "b.blog_id = a.blog_id and a.blog_name like \'%Web%\'" );\n   * @param string|array $from 来自多张表或者多个类[必须是数据对象类名], 在from后的多张表名, 表名之间以逗号[,]隔开\n   * \n   *        示例如下: \n   *            0. "table1, table2"\n   *            1. array("table1", "table2")\n   *            2. "class1, class2"\n   *            3. array("class1", "class2")\n   * \n   * @param object|string|array $filter\n   * \n   *        $filter 格式示例如下: \n   *            0. 允许对象如new User(id = "1", name = "green");\n   *            1. "id = 1", "name = \'sky\'"\n   *            2. array("id = 1", "name = \'sky\'")\n   *            3. array("id" => "1", "name" => "sky")\n   * \n   * @return int 对象总计数\n')])])])]),n._v(" "),a("li",[a("p",[n._v("queryPageMultitable: 对象分页[多表关联查询]")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function queryPageMultitable($startPoint, $endPoint, $from, $filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * \n   *        $comments = Comment::queryPageMultitable( 1, 6, "Blog a, Comment b", "b.blog_id = a.blog_id and a.blog_name like \'%Web%\'" );\n   * @param int $startPoint  分页开始记录数\n   * @param int $endPoint    分页结束记录数\n   * @param string|array $from 来自多张表或者多个类[必须是数据对象类名], 在from后的多张表名, 表名之间以逗号[,]隔开\n   * 示例如下: \n   * \n   *        0. "table1, table2"\n   *        1. array("table1", "table2")\n   *        2. "class1, class2"\n   *        3. array("class1", "class2")\n   * \n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 默认为 id desc\n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * @return mixed 对象分页\n')])])])]),n._v(" "),a("li",[a("p",[n._v("getMultitable: 查询数据对象列表[多表关联查询]")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义: public static function getMultitable($from, $filter = null, $sort = CrudSQL::SQL_ORDER_DEFAULT_ID)\n函数说明:\n   * @example 示例如下\n   * \n   *        $comments = Comment::getMultitable( "Blog a, Comment b", "b.blog_id = a.blog_id and a.blog_name like \'%Web%\'" );\n   * @param string|array $from 来自多张表或者多个类[必须是数据对象类名], 在from后的多张表名, 表名之间以逗号[,]隔开\n   * 示例如下: \n   * \n   *        0. "table1, table2"\n   *        1. array("table1", "table2")\n   *        2. "class1, class2"\n   *        3. array("class1", "class2")\n   * \n   * @param object|string|array $filter 查询条件, 在where后的条件\n   * 示例如下: \n   * \n   *        0. "id = 1, name = \'sky\'"\n   *        1. array("id = 1", "name = \'sky\'")\n   *        2. array("id" => "1", "name" => "sky")\n   *        3. 允许对象如new User(id = "1", name = "green");\n   * \n   * 默认:SQL Where条件子语句。如: "( id = 1 and name = \'sky\' ) or ( name like \'%sky%\' )"\n   * \n   * @param string $sort 排序条件\n   * 默认为 id desc\n   * 示例如下: \n   * \n   *        1. id asc;\n   *        2. name desc;\n   * @return mixed 对象分页\n')])])])]),n._v(" "),a("li",[a("p",[n._v("saveDeleteRelateions: 同步删除取消了已有多对多关系、保存新增多对多关系")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('函数定义:public static function saveDeleteRelateions($id_name, $id, $rel_name, $other_ids) \n函数说明:\n   * @example 示例如下:\n   *\n   *     Userrole::saveDeleteRelateions( "user_id", 1, "role_id", array(1, 2) );\n   * @param string $id_name 主标识名称\n   * @param int $id 主标识\n   * @param string $rel_name 关系标识名称\n   * @param array $other_ids 关系标识组\n')])])])])])])}),[],!1,null,null,null);e.default=t.exports}}]);
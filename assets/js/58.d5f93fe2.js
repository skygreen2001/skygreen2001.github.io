(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{458:function(t,e,a){"use strict";a.r(e);var i=a(56),n=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"php-with-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-with-nginx"}},[t._v("#")]),t._v(" PHP with Nginx")]),t._v(" "),a("h2",{attrs:{id:"安装nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装nginx"}},[t._v("#")]),t._v(" 安装Nginx")]),t._v(" "),a("ul",[a("li",[t._v("sudo apt-get update")]),t._v(" "),a("li",[t._v("sudo apt-get install nginx")]),t._v(" "),a("li",[t._v("config file: /etc/nginx/nginx.conf")]),t._v(" "),a("li",[t._v("sudo service nginx stop")]),t._v(" "),a("li",[t._v("sudo service nginx start")]),t._v(" "),a("li",[t._v("sudo service nginx restart")]),t._v(" "),a("li",[t._v("sudo update-rc.d nginx defaults  [we can make sure that our web server will restart automatically when the server is rebooted by typing]")]),t._v(" "),a("li",[t._v("/usr/sbin/nginx -t   [判断Nginx配置是否正确]")]),t._v(" "),a("li",[t._v("/usr/sbin/nginx -s reload")])]),t._v(" "),a("h2",{attrs:{id:"nginx-常用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-常用配置"}},[t._v("#")]),t._v(" nginx 常用配置")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Nginx 的 Location 配置指令块:")]),t._v(" "),a("ul",[a("li",[t._v("Location 配置项在http > server 里面")]),t._v(" "),a("li",[t._v("基本语法形式是: location [=|~|~*|^~|@] pattern { … }")]),t._v(" "),a("li",[t._v("[=|~|~*|^~|@] 被称作 location modifier")]),t._v(" "),a("li",[t._v("关于 location modifier:\n"),a("ul",[a("li",[t._v("=\n"),a("ul",[a("li",[t._v("这会完全匹配指定的 pattern, 且这里的 pattern 被限制成简单的字符串, 也就是说这里不能使用正则表达式。")]),t._v(" "),a("li",[t._v("匹配情况:\n"),a("ul",[a("li",[t._v("http://website.com/abcd # 正好完全匹配")]),t._v(" "),a("li",[t._v("http://website.com/ABCD # 如果运行 Nginx server 的系统本身对大小写不敏感, 比如 Windows,  那么也匹配")]),t._v(" "),a("li",[t._v("http://website.com/abcd?param1¶m2 # 忽略查询串参数（query string arguments）, 这里就是 /abcd 后面的 ?param1¶m2")]),t._v(" "),a("li",[t._v("http://website.com/abcd/ # 不匹配, 因为末尾存在反斜杠（trailing slash）, Nginx 不认为这种情况是完全匹配")]),t._v(" "),a("li",[t._v("http://website.com/abcde # 不匹配, 因为不是完全匹配")])])])])]),t._v(" "),a("li",[t._v("(None)\n"),a("ul",[a("li",[t._v("可以不写 location modifier, Nginx 仍然能去匹配 pattern。这种情况下, 匹配那些以指定的 patern 开头的 URI, 注意这里的 URI 只能是普通字符串, 不能使用正则表达式。")]),t._v(" "),a("li",[t._v("匹配情况:\n"),a("ul",[a("li",[t._v("http://website.com/abcd # 正好完全匹配")]),t._v(" "),a("li",[t._v("http://website.com/ABCD # 如果运行 Nginx server 的系统本身对大小写不敏感, 比如 Windows,  那么也匹配")]),t._v(" "),a("li",[t._v("http://website.com/abcd?param1¶m2 # 忽略查询串参数（query string arguments）, 这里就是 /abcd 后面的 ?param1¶m2")]),t._v(" "),a("li",[t._v("http://website.com/abcd/ # 末尾存在反斜杠（trailing slash）也属于匹配范围内")]),t._v(" "),a("li",[t._v("http://website.com/abcde # 仍然匹配, 因为 URI 是以 pattern 开头的")])])])])]),t._v(" "),a("li",[t._v("~\n"),a("ul",[a("li",[t._v("这个 location modifier 对大小写敏感, 且 pattern 须是正则表达式")]),t._v(" "),a("li",[t._v("匹配情况:\n"),a("ul",[a("li",[t._v("http://website.com/abcd # 完全匹配")]),t._v(" "),a("li",[t._v("http://website.com/ABCD # 不匹配, ~ 对大小写是敏感的")]),t._v(" "),a("li",[t._v("http://website.com/abcd?param1¶m2 # 忽略查询串参数（query string arguments）, 这里就是 /abcd 后面的 ?param1¶m2")]),t._v(" "),a("li",[t._v("http://website.com/abcd/ # 不匹配, 因为末尾存在反斜杠（trailing slash）, 并不匹配正则表达式 ^/abcd$")]),t._v(" "),a("li",[t._v("http://website.com/abcde # 不匹配正则表达式 ^/abcd$")])])])])]),t._v(" "),a("li",[t._v("~*\n"),a("ul",[a("li",[t._v("与 ~ 类似, 但这个 location modifier 不区分大小写, pattern 须是正则表达式")]),t._v(" "),a("li",[t._v("匹配情况:\n"),a("ul",[a("li",[t._v("http://website.com/abcd # 完全匹配")]),t._v(" "),a("li",[t._v("http://website.com/ABCD # 匹配, 这就是它不区分大小写的特性")]),t._v(" "),a("li",[t._v("http://website.com/abcd?param1¶m2 # 忽略查询串参数（query string arguments）, 这里就是 /abcd 后面的 ?param1¶m2")]),t._v(" "),a("li",[t._v("http://website.com/abcd/ # 不匹配, 因为末尾存在反斜杠（trailing slash）, 并不匹配正则表达式 ^/abcd$")]),t._v(" "),a("li",[t._v("http://website.com/abcde # 不匹配正则表达式 ^/abcd$")])])])])]),t._v(" "),a("li",[t._v("^~\n"),a("ul",[a("li",[t._v("匹配情况类似 2. (None) 的情况, 以指定匹配模式开头的 URI 被匹配, 不同的是, 一旦匹配成功, 那么 Nginx 就停止去寻找其他的 Location 块进行匹配了（与 Location 匹配顺序有关）")])])]),t._v(" "),a("li",[t._v("@\n"),a("ul",[a("li",[t._v("用于定义一个 Location 块, 且该块不能被外部 Client 所访问, 只能被 Nginx 内部配置指令所访问, 比如 try_files or error_page")])])])])]),t._v(" "),a("li",[t._v("搜索顺序以及生效优先级:\n"),a("ul",[a("li",[t._v("因为可以定义多个 Location 块, 每个 Location 块可以有各自的 pattern。因此就需要明白（不管是 Nginx 还是你）, 当 Nginx 收到一个请求时, 它是如何去匹配 URI 并找到合适的 Location 的。")]),t._v(" "),a("li",[t._v("要注意的是, 写在配置文件中每个 Server 块中的 Location 块的次序是不重要的, Nginx 会按 location modifier 的优先级来依次用 URI 去匹配 pattern,  顺序如下:\n"),a("ul",[a("li",[t._v("1、 =")]),t._v(" "),a("li",[t._v("2、 (None) 如果 pattern 完全匹配 URI（不是只匹配 URI 的头部）")]),t._v(" "),a("li",[t._v("3、 ^~")]),t._v(" "),a("li",[t._v("4、 ~ 或 ~*")]),t._v(" "),a("li",[t._v("5、 (None) pattern 匹配 URI 的头部")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("返回设置")]),t._v(" "),a("ul",[a("li",[t._v("返回文本格式"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location ~ ^/get_text {\n  default_type text/html;\n  add_header Content-Type 'text/html; charset=utf-8';\n  return 200 '您好, 支持中文字体!'; \n}\n")])])])]),t._v(" "),a("li",[t._v("返回json格式"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location ~ ^/get_json { \n  default_type application/json; \n  return 200 \'{"status":"success","result":"hello world!"}\'; \n}\n')])])])])])])]),t._v(" "),a("h2",{attrs:{id:"安装-php-with-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-php-with-nginx"}},[t._v("#")]),t._v(" 安装 Php with Nginx")]),t._v(" "),a("h3",{attrs:{id:"安装php-fpm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装php-fpm"}},[t._v("#")]),t._v(" 安装php-fpm")]),t._v(" "),a("ul",[a("li",[t._v("apt-get update")]),t._v(" "),a("li",[t._v("sudo apt-get install php-fpm\n"),a("ul",[a("li",[t._v("sudo apt-get install php5-fpm  （ubuntu 14.04）")])])]),t._v(" "),a("li",[t._v("vi /etc/php/7.0/fpm/php.ini\n"),a("ul",[a("li",[t._v("vi /etc/php5/fpm/php.ini （ubuntu 14.04）\n"),a("ul",[a("li",[t._v("cgi.fix_pathinfo=0")])])])])]),t._v(" "),a("li",[t._v("service php7.0-fpm restart\n"),a("ul",[a("li",[t._v("service php5-fpm restart  （ubuntu 14.04）")])])]),t._v(" "),a("li",[t._v("systemctl restart php7.0-fpm.service")]),t._v(" "),a("li",[t._v("systemctl restart php7.0-fpm")])]),t._v(" "),a("h3",{attrs:{id:"配置php网站"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置php网站"}},[t._v("#")]),t._v(" 配置PHP网站")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新建文件放置在/etc/nginx/目录下: fastcgi_cache   [类似文件: fastcgi_params]")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('fastcgi_cache phpcache;\nfastcgi_cache_key "$scheme$host$request_uri"; # $request_uri includes the request arguments (such as /page.php?arg=value)\nfastcgi_cache_min_uses 2; # after 2 hits, a request receives a cached response\nfastcgi_cache_use_stale updating timeout;\nfastcgi_cache_valid 404 1m;\nfastcgi_cache_valid 500 502 504 5m;\n')])])])]),t._v(" "),a("li",[a("p",[t._v("修改 /etc/nginx/sites-enabled/www.conf")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("https 配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fastcgi_cache_path /tmp/cache levels=1:2 keys_zone=phpcache:10m inactive=30m max_size=500M;\nserver {\n    listen       443 ssl spdy;\n    server_name  www.bb.com;\n    server_name  bb.com;\n    ssl          on;\n    root /var/www/html/bb/;\n    index index.php index.html index.htm index.nginx-debian.html;\n    location ~* \\.php$ {\n        #include snippets/fastcgi-php.conf;\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n        # fastcgi_pass unix:/var/run/php5-fpm.sock; （ubuntu 14.04 php5.x）\n        fastcgi_index index.php;\n        include fastcgi_params;\n        include fastcgi_cache;\n    }\n\n    ssl_certificate   /etc/nginx/ssl/1522722468431.pem;\n    ssl_certificate_key  /etc/nginx/ssl/1522722468431.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\n    ssl_prefer_server_ciphers on;\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("http 配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fastcgi_cache_path /tmp/cache levels=1:2 keys_zone=phpcache:10m inactive=30m max_size=500M;\nserver{\n    listen 80;\n    server_name www.bb.com;\n    server_name bb.com;\n    root /var/www/html/bb/;\n    index index.php index.html index.htm index.nginx-debian.html;\n    location ~* \\.php$ {\n        #include snippets/fastcgi-php.conf;\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n        # fastcgi_pass unix:/var/run/php5-fpm.sock; （ubuntu 14.04 php5.x）\n        fastcgi_index index.php;\n        include fastcgi_params;\n        include fastcgi_cache;\n    }\n\n    error_page 404 https://www.bb.com/;\n}\n")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"php-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-常用命令"}},[t._v("#")]),t._v(" php 常用命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("- sudo apt-get install php-gd php-curl php-mbstring\n- sudo apt-get install php-mysqli\n- sudo phpenmod mysqli\n- php -m 列表已加载的组件\n")])])]),a("h2",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[t._v("#")]),t._v(" FAQ")]),t._v(" "),a("p",[t._v("由于nginx与php-fpm之间的一个小bug，会导致这样的现象: 网站中的静态页面 *.html 都能正常访问，而 *.php 文件虽然会返回200状态码， 但实际输出给浏览器的页面内容却是空白。")]),t._v(" "),a("p",[t._v("简而言之，原因是nginx无法正确的将 *.php 文件的地址传递给php-fpm去解析， 相当于php-fpm接受到了请求，但这请求却指向一个不存在的文件，于是返回空结果。 为了解决这个问题，需要改动nginx默认的fastcgiparams配置文件:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("vi /etc/nginx/fastcgi_params 在文件的最后增加两行:")]),t._v(" "),a("p",[t._v("fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;\nfastcgi_param PATH_INFO        $fastcgi_script_name;")])]),t._v(" "),a("li",[a("p",[t._v("然后重启一下服务:")]),t._v(" "),a("ul",[a("li",[t._v("service php7.0-fpm reload && service nginx reload")])])])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://xuexb.github.io/learn-nginx/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 入门教程"),a("OutboundLink")],1),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/xuexb/learn-nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github地址"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.nginx.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NGINX Docs"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/taobao/nginx-book",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx开发从入门到精通"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openresty.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenResty® 是一款基于 NGINX 和 LuaJIT 的 Web 平台"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);
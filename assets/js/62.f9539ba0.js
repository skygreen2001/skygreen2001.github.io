(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{459:function(e,a,t){"use strict";t.r(a);var l=t(56),r=Object(l.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"laravel从入门到实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#laravel从入门到实践"}},[e._v("#")]),e._v(" Laravel从入门到实践")]),e._v(" "),t("p",[e._v("2011年6月创立")]),e._v(" "),t("h2",{attrs:{id:"版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[e._v("#")]),e._v(" 版本")]),e._v(" "),t("ul",[t("li",[e._v("Laravel版本: 8.75.0")])]),e._v(" "),t("h2",{attrs:{id:"安装与配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装与配置"}},[e._v("#")]),e._v(" 安装与配置")]),e._v(" "),t("h3",{attrs:{id:"使用docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用docker"}},[e._v("#")]),e._v(" 使用Docker")]),e._v(" "),t("ul",[t("li",[e._v('安装项目: curl -s "https://laravel.build/betterlife" | bash')]),e._v(" "),t("li",[e._v("启动项目: cd betterlife && ./vendor/bin/sail up")])]),e._v(" "),t("h3",{attrs:{id:"使用composer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用composer"}},[e._v("#")]),e._v(" 使用Composer")]),e._v(" "),t("ul",[t("li",[e._v("安装项目: composer create-project laravel/laravel betterlife")]),e._v(" "),t("li",[e._v("启动项目: cd betterlife && php artisan serve")])]),e._v(" "),t("h3",{attrs:{id:"环境要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境要求"}},[e._v("#")]),e._v(" 环境要求")]),e._v(" "),t("ul",[t("li",[e._v("PHP >= 7.3")]),e._v(" "),t("li",[e._v("PHP Extension\n"),t("ul",[t("li",[e._v("BCMath")]),e._v(" "),t("li",[e._v("Ctype")]),e._v(" "),t("li",[e._v("Fileinfo")]),e._v(" "),t("li",[e._v("JSON")]),e._v(" "),t("li",[e._v("Mbstring")]),e._v(" "),t("li",[e._v("OpenSSL")]),e._v(" "),t("li",[e._v("PDO")]),e._v(" "),t("li",[e._v("Tokenizer")]),e._v(" "),t("li",[e._v("XML")])])])]),e._v(" "),t("h3",{attrs:{id:"查看命令集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看命令集"}},[e._v("#")]),e._v(" 查看命令集")]),e._v(" "),t("ul",[t("li",[e._v("查看可使用的命令: php artisan list")])]),e._v(" "),t("h2",{attrs:{id:"框架目录定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架目录定义"}},[e._v("#")]),e._v(" 框架目录定义")]),e._v(" "),t("ul",[t("li",[e._v("app      : 存放应用核心代码，如模型、控制器、命令、服务等\n"),t("ul",[t("li",[e._v("Console   : 包含应用所有自定义的 Artisan 命令")]),e._v(" "),t("li",[e._v("Http      : 包含了控制器、中间件以及表单请求等，几乎所有通过 Web 进入应用的请求处理都在这里进行")]),e._v(" "),t("li",[e._v("Exceptions: 包含应用的异常处理器，同时还是处理应用抛出的任何异常的好地方。")]),e._v(" "),t("li",[e._v("Models    : 包含所有 Eloquent 模型类。 Eloquent ORM 为处理数据库提供了一个漂亮、简单的 ActiveRecord 实现。")]),e._v(" "),t("li",[e._v("Providers : 包含程序中所有的的服务提供者。通过在服务容器中绑定服务、注册事件。")])])]),e._v(" "),t("li",[e._v("bootstrap: 存放 Laravel 框架每次启动时用到的文件")]),e._v(" "),t("li",[e._v("config   : 用于存放项目所有配置文件")]),e._v(" "),t("li",[e._v("database : 存放数据库迁移和填充类文件")]),e._v(" "),t("li",[e._v("public   : Web 应用入口目录，用于存放入口文件 index.php 及前端资源文件（CSS、JS、图片等）")]),e._v(" "),t("li",[e._v("resources: 用于存放非 PHP 资源文件，如视图模板、语言文件、待编译的 Vue 模板、Sass、JS 源文件")]),e._v(" "),t("li",[e._v("routes   : 项目的所有路由文件都定义在这里")]),e._v(" "),t("li",[e._v("storage  : 用于存放缓存、日志、上传文件、已经编译过的视图模板等")]),e._v(" "),t("li",[e._v("tests    : 存放单元测试及功能测试代码")]),e._v(" "),t("li",[e._v("vendor   : 通过 Composer 安装的依赖包都存放在这里，通常该目录会放到 .gitignore 文件里以排除到版本控制系统之外")])]),e._v(" "),t("h2",{attrs:{id:"valet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#valet"}},[e._v("#")]),e._v(" Valet")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Valet 是 Mac 极简主义者的 Laravel 开发环境。")])]),e._v(" "),t("li",[t("p",[e._v("确保 ~/.composer/vendor/bin 目录在系统的「PATH」中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  vi ~/.bash_profile\n    > export PATH=$PATH:~/.composer/vendor/bin\n  source ~/.bash_profile\n  echo $PATH\n")])])])]),e._v(" "),t("li",[t("p",[e._v("安装Valet")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  brew update && brew install php\n  composer global require laravel/valet\n  valet install\n")])])])]),e._v(" "),t("li",[t("p",[e._v("关闭Valet: valet stop")])]),e._v(" "),t("li",[t("p",[e._v("开启Valet: valet start")])]),e._v(" "),t("li",[t("p",[e._v("重启Valet: valet restart")])]),e._v(" "),t("li",[t("p",[e._v("绑定应用: cd betterlife && valet link")])]),e._v(" "),t("li",[t("p",[e._v("访问网站: http://betterlife.test/")]),e._v(" "),t("ul",[t("li",[e._v("http://betterlife[同应用目录名称].test/")]),e._v(" "),t("li",[e._v("任何二级域名也可以访问，如: http://abc.betterlife.test")])])]),e._v(" "),t("li",[t("p",[e._v("查看列表: valet links")])]),e._v(" "),t("li",[t("p",[e._v("取消绑定: valet unlink betterlife")])])]),e._v(" "),t("h2",{attrs:{id:"telescope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#telescope"}},[e._v("#")]),e._v(" Telescope")]),e._v(" "),t("ul",[t("li",[e._v("Telescope 调试工具是本地 Laravel 开发环境的绝佳伴侣。")]),e._v(" "),t("li",[e._v("Telescope 可以洞察进入应用程序的请求、异常、日志条目、数据库查询、队列任务、邮件、通知、缓存操作、计划任务、变量输出。")]),e._v(" "),t("li",[e._v("安装Telescope, 仅本地使用:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  composer require laravel/telescope --dev\n  php artisan telescope:install\n  php artisan migrate\n")])])])]),e._v(" "),t("li",[e._v("浏览器访问Telescope: /telescope\n"),t("ul",[t("li",[e._v("如当前应用: http://betterlife.test/telescope")])])])]),e._v(" "),t("h2",{attrs:{id:"安装laravel-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装laravel-package"}},[e._v("#")]),e._v(" 安装Laravel Package")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://packalyst.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Packalyst"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("拥有15000多个Laravel Package安装包可使用")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://packalyst.com/packages/package/barryvdh/laravel-debugbar",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装laravel-debugbar"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("修改根路径下composer.json文件"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  {\n      "name": "laravel/laravel",\n      ......\n      "require": {\n          ......\n          "barryvdh/laravel-debugbar": "v3.6.5"\n      }\n      ......\n  }\n')])])])]),e._v(" "),t("li",[e._v("删除根路径下的composer.lock文件，在根路径下运行: composer install")]),e._v(" "),t("li",[e._v("浏览器网页下方会显示调试条，可修改根路径下.env文件的属性: APP_DEBUG 显示隐藏它")])]),e._v(" "),t("h2",{attrs:{id:"安装数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装数据库"}},[e._v("#")]),e._v(" 安装数据库")]),e._v(" "),t("ul",[t("li",[e._v("安装Dbngin: https://dbngin.com/")]),e._v(" "),t("li",[e._v("新建数据库 : betterlife")]),e._v(" "),t("li",[e._v("修改根路径下文件.env配置"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=betterlife\n    DB_USERNAME=root\n    DB_PASSWORD=\n")])])])]),e._v(" "),t("li",[e._v("初始化数据库: php artisan migrate")])]),e._v(" "),t("h2",{attrs:{id:"启动工具包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动工具包"}},[e._v("#")]),e._v(" 启动工具包")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("创建权限认证: Laravel UI")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    composer require laravel/ui\n    php artisan ui bootstrap --auth\n    npm install && npm run dev\n    npm run watch\n")])])]),t("ul",[t("li",[e._v("views页面放置在resources/views目录下")])])]),e._v(" "),t("li",[t("p",[e._v("创建权限认证: Laravel Breeze")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("使用Blade模版语言")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  composer require laravel/breeze --dev\n  php artisan breeze:install\n  npm install && npm run dev\n  php artisan migrate\n  npm run watch\n")])])]),t("ul",[t("li",[e._v("views页面放置在resources/views目录下")])])]),e._v(" "),t("li",[t("p",[e._v("使用Inertia.js前端Vue或React实现")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  php artisan breeze:install vue\n  或\n  php artisan breeze:install react\n\n  npm install && npm run dev\n  php artisan migrate\n  npm run watch\n")])])]),t("ul",[t("li",[e._v("views页面放置在resources/js/Pages目录下")])])]),e._v(" "),t("li",[t("p",[e._v("提供权限认证后台Api支持")]),e._v(" "),t("ul",[t("li",[e._v("提供给类似Next.js, Nuxt或其它类似的现代JavaScript应用程序权限认证功能"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  php artisan breeze:install api\n  php artisan migrate\n")])])]),t("ul",[t("li",[e._v("Netx.js实现: https://github.com/laravel/breeze-next")])])])])])])]),e._v(" "),t("li",[t("p",[e._v("创建权限认证: Laravel Jetstream")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Jetstream 官方文档:")])]),e._v(" "),t("li",[t("p",[e._v("安装Jetstream: composer require laravel/jetstream")])]),e._v(" "),t("li",[t("p",[e._v("Jetstream 使用 Tailwind CSS 设计样式，并提供 Livewire 或 Inertia.js 驱动的前端脚手架技术栈。")])]),e._v(" "),t("li",[t("p",[e._v("Livewire + Blade")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  php artisan jetstream:install livewire\n\n  php artisan jetstream:install livewire --teams\n  npm install && npm run dev\n  php artisan migrate\n")])])]),t("ul",[t("li",[e._v("views页面放置在resources/views目录下")])])]),e._v(" "),t("li",[t("p",[e._v("Inertia + Vue")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  php artisan jetstream:install inertia\n\n  php artisan jetstream:install inertia --teams\n  npm install && npm run dev\n  php artisan migrate\n")])])]),t("ul",[t("li",[e._v("views页面放置在resources/js/Pages目录下")])])]),e._v(" "),t("li",[t("p",[e._v("移除Jetstream")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  composer remove laravel/jetstream\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("自定义权限认证: https://laravel.com/docs/8.x/authentication#authenticating-users")])])]),e._v(" "),t("h2",{attrs:{id:"创建应用-博客"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建应用-博客"}},[e._v("#")]),e._v(" 创建应用: 博客")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("创建表: blogs")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    php artisan make:migration create_blogs_table --create=blogs\n")])])])]),e._v(" "),t("li",[t("p",[e._v("表字段定义")]),e._v(" "),t("ul",[t("li",[e._v("打开文件: database/migrations/"+e._s(e.datetime)+"_create_blogs_table.php")]),e._v(" "),t("li",[e._v("在up()方法里添加如下代码:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    Schema::create('blogs', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('title');\n        $table->string('url')->unique();\n        $table->text('description');\n        $table->timestamps();\n    });\n")])])])]),e._v(" "),t("li",[e._v("数据库同步: php artisan migrate")]),e._v(" "),t("li",[e._v("数据库同步: php artisan migrate:fresh\n"),t("ul",[t("li",[e._v("会重置整个数据库。")])])])])]),e._v(" "),t("li",[t("p",[e._v("建模和创建模拟数据")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("建模和数据工厂: php artisan make:model --factory Blog")])]),e._v(" "),t("li",[t("p",[e._v("在工厂类里定义模拟数据数据")]),e._v(" "),t("ul",[t("li",[e._v("文件: database/factories/BlogFactory.php")]),e._v(" "),t("li",[e._v("在definition()方法里添加代码"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    return [\n        'title' => substr($this->faker->sentence(2), 0, -1),\n        'url' => $this->faker->url,\n        'description' => $this->faker->paragraph,\n    ];\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("创建Blog Seeder: php artisan make:seeder BlogsTableSeeder")]),e._v(" "),t("ul",[t("li",[e._v("方便添加代码中定义的数据到表中")])])]),e._v(" "),t("li",[t("p",[e._v("修改新生成的文件: database/seeders/BlogsTableSeeder")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  public function run()\n  {\n      \\App\\Models\\Blog::factory(5)->create();\n  }\n")])])])]),e._v(" "),t("li",[t("p",[e._v("修改原本存在的文件: database/seeders/DatabaseSeeder.php")]),e._v(" "),t("ul",[t("li",[e._v("以激活使用: \\Database\\Seeders\\BlogsTableSeeder")]),e._v(" "),t("li",[e._v("修改如下:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public function run()\n    {\n        $this->call(BlogsTableSeeder::class);\n    }\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("重新同步表和模拟数据到数据库: php artisan migrate:fresh --seed")])]),e._v(" "),t("li",[t("p",[e._v("使用Tink Shell查看模型数据: php artisan tinker")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    \\App\\Models\\Blog::first();\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("Routing 和 Views")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("在文件 routes/web.php 里添加路由")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  Route::get('/', function () {\n      $blogs = \\App\\Models\\Blog::all();\n      return view('welcome', ['blogs' => $blogs]);\n  });\n")])])])]),e._v(" "),t("li",[t("p",[e._v("修改文件: resources/views/welcome.blade.php")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  <div class="blogs">\n  @foreach ($blogs as $blog)\n      <a href="{{ $blog->url }}">{{ $blog->title }}</a><br/>\n  @endforeach\n  </div>\n')])])])]),e._v(" "),t("li",[t("p",[e._v("创建权限认证: Laravel UI")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    composer require laravel/ui\n    php artisan ui bootstrap --auth\n    npm install && npm run dev\n    npm run watch\n")])])])]),e._v(" "),t("li",[t("p",[e._v("创建Form")]),e._v(" "),t("ul",[t("li",[e._v("新建路由"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  Route::get('/edit', function () {\n      return view('edit');\n  });\n")])])])]),e._v(" "),t("li",[e._v("新建文件:  resources/views/edit.blade.php"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  @extends(\'layouts.app\')\n  @section(\'content\')\n      <div class="container">\n          <div class="row">\n              <h1>Submit a blog</h1>\n          </div>\n          <div class="row">\n              <form action="/edit" method="post">\n                  @csrf\n                  @if ($errors->any())\n                      <div class="alert alert-danger" role="alert">\n                          Please fix the following errors\n                      </div>\n                  @endif\n                  <div class="form-group">\n                      <label for="title">Title</label>\n                      <input type="text" class="form-control @error(\'title\') is-invalid @enderror" id="title" name="title" placeholder="Title" value="{{ old(\'title\') }}">\n                      @error(\'title\')\n                          <div class="invalid-feedback">{{ $message }}</div>\n                      @enderror\n                  </div>\n                  <div class="form-group">\n                      <label for="url">Url</label>\n                      <input type="text" class="form-control @error(\'url\') is-invalid @enderror" id="url" name="url" placeholder="URL" value="{{ old(\'url\') }}">\n                      @error(\'url\')\n                          <div class="invalid-feedback">{{ $message }}</div>\n                      @enderror\n                  </div>\n                  <div class="form-group">\n                      <label for="description">Description</label>\n                      <textarea class="form-control @error(\'description\') is-invalid @enderror" id="description" name="description" placeholder="description">{{ old(\'description\') }}</textarea>\n                      @error(\'description\')\n                          <div class="invalid-feedback">{{ $message }}</div>\n                      @enderror\n                  </div><br/>\n                  <button type="submit" class="btn btn-primary">Submit</button>\n              </form>\n          </div>\n      </div>\n  @endsection\n')])])])]),e._v(" "),t("li",[e._v("在文件 routes/web.php 里新建提交博客路由"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  use Illuminate\\Http\\Request;\n\n  Route::post('/edit', function (Request $request) {\n      $data = $request->validate([\n          'title' => 'required|max:255',\n          'url' => 'required|url|max:255',\n          'description' => 'required|max:255',\n      ]);\n  \n      $blog = tap(new App\\Models\\Blog($data))->save();\n  \n      return redirect('/');\n  });\n")])])])]),e._v(" "),t("li",[e._v("修改app/Models/Blog.php"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  <?php\n\n  namespace App\\Models;\n\n  use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n  use Illuminate\\Database\\Eloquent\\Model;\n\n  class Blog extends Model\n  {\n      use HasFactory;\n      protected $fillable = [\n          'title',\n          'url',\n          'description'\n      ];\n  }\n")])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("Controllers")]),e._v(" "),t("ul",[t("li",[e._v("基于Model生成Controller: php artisan make:controller BlogController --model=Blog --resource")]),e._v(" "),t("li",[e._v("在文件 routes/web.php 里添加路由:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  use App\\Http\\Controllers\\BlogController;\n  Route::resource('blog', BlogController::class);\n")])])])]),e._v(" "),t("li",[e._v("修改文件 app/Http/Controllers/BlogController.php :"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  public function show(Blog $blog)\n  {\n      // dd($blog);\n      return $blog;\n  }\n")])])]),t("ul",[t("li",[e._v("说明: 变量名要和resource的名称相同，\n"),t("ul",[t("li",[e._v("可以通过指令查看函数的变量名是什么: php artisan route:list")]),e._v(" "),t("li",[e._v("如路由名改为book: Route::resource('book', 那么方法名的变量也是book: public function show(Blog $book)")]),e._v(" "),t("li",[e._v("复数也是可以的,如路由名是blogs: Route::resource('blogs', 那么方法名的变量还是blog: public function show(Blog $blog)")])])])])]),e._v(" "),t("li",[e._v("访问url: http://betterlife.test/blog/5")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://laravel.com/docs/8.x/controllers#actions-handled-by-resource-controller",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多关于Resource Controller"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("添加分页方法\n"),t("ul",[t("li",[e._v("新建Resource Collection: php artisan make:resource BlogCollection")]),e._v(" "),t("li",[e._v("修改文件: routes/web.php"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  use App\\Http\\Controllers\\BlogController;\n  Route::get('/blog/page', [BlogController::class, 'querypage']);\n")])])])]),e._v(" "),t("li",[e._v("修改文件: app/Http/Resources/BlogController.php"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  use App\\Http\\Resources\\BlogCollection;\n  ......\n  /**\n   * 分页查询\n   * @param  \\Illuminate\\Http\\Request $request\n   * @return ResourceCollection\n   */\n  public function querypage(Request $request) {\n      $per_page = $request->per_page;\n      return new BlogCollection(Blog::paginate($per_page));\n  }\n  ......\n")])])])])])]),e._v(" "),t("li",[e._v("访问url: http://betterlife.test/blog/page?page=2&per_page=2")])])]),e._v(" "),t("li",[t("p",[e._v("添加测试")]),e._v(" "),t("ul",[t("li",[e._v("测试Form提交\n"),t("ul",[t("li",[e._v("根路径下修改文件: phpunit.xml\n"),t("ul",[t("li",[e._v("配置使用SQLite(in-memory)数据库"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  <php>\n      ... \n      <env name="DB_CONNECTION" value="sqlite"/>\n      <env name="DB_DATABASE" value=":memory:"/>\n      ...\n  </php>\n')])])])])])]),e._v(" "),t("li",[e._v("删除Laravel默认生成的Feature测试类: rm tests/Feature/ExampleTest.php")]),e._v(" "),t("li",[e._v("新建Feature测试类: php artisan make:test EditBlogsTest")]),e._v(" "),t("li",[e._v("在新建的文件: tests/Feature/EditBlogsTest.php 新增测试用例如下\n"),t("ul",[t("li",[e._v("合法有效的Blog保存进数据库")]),e._v(" "),t("li",[e._v("校验失败的Blog不能保存进数据库")]),e._v(" "),t("li",[e._v("不允许提交不符合格式的url")]),e._v(" "),t("li",[e._v("当字段长度超过255，校验失败")]),e._v(" "),t("li",[e._v("字段长度在255以内，校验成功")]),e._v(" "),t("li",[e._v("以上测试用例编码如下"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  <?php\n\n  namespace Tests\\Feature;\n\n  use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n  use Illuminate\\Validation\\ValidationException;\n  use Tests\\TestCase;\n\n  class EditBlogsTest extends TestCase\n  {\n      use RefreshDatabase;\n      /**\n      * A basic feature test example.\n      *\n      * @return void\n      */\n      public function test_example()\n      {\n          $response = $this->get('/');\n\n          $response->assertStatus(200);\n      }\n\n      /** @test */\n      public function guest_can_submit_a_new_blog() {\n\n          $response = $this->post('/edit', [\n              'title' => 'Example Title',\n              'url' => 'http://example.com',\n              'description' => 'Example description.',\n          ]);\n  \n          $this->assertDatabaseHas('blogs', [\n              'title' => 'Example Title'\n          ]);\n  \n          $response\n              ->assertStatus(302)\n              ->assertHeader('Location', url('/'));\n  \n          $this\n              ->get('/')\n              ->assertSee('Example Title');\n      }\n      \n      /** @test */\n      public function blog_is_not_created_if_validation_fails() {\n\n          $response = $this->post('/edit');\n          $response->assertSessionHasErrors(['title', 'url', 'description']);\n      }\n      \n      /** @test */\n      public function blog_is_not_created_with_an_invalid_url() {\n\n          $this->withoutExceptionHandling();\n      \n          $cases = ['//invalid-url.com', '/invalid-url', 'foo.com'];\n      \n          foreach ($cases as $case) {\n              try {\n                  $response = $this->post('/edit', [\n                      'title' => 'Example Title',\n                      'url' => $case,\n                      'description' => 'Example description',\n                  ]);\n              } catch (ValidationException $e) {\n                  $this->assertEquals(\n                      'The url must be a valid URL.',\n                      $e->validator->errors()->first('url')\n                  );\n                  continue;\n              }\n              $this->fail(\"The URL $case passed validation when it should have failed.\");\n          }\n      }\n      \n      /** @test */\n      public function max_length_fails_when_too_long() {\n\n          $this->withoutExceptionHandling();\n  \n          $title = str_repeat('a', 256);\n          $description = str_repeat('a', 256);\n          $url = 'http://';\n          $url .= str_repeat('a', 256 - strlen($url));\n      \n          try {\n              $this->post('/edit', compact('title', 'url', 'description'));\n          } catch(ValidationException $e) {\n              $this->assertEquals(\n                  'The title must not be greater than 255 characters.',\n                  $e->validator->errors()->first('title')\n              );\n      \n              $this->assertEquals(\n                  'The url must not be greater than 255 characters.',\n                  $e->validator->errors()->first('url')\n              );\n      \n              $this->assertEquals(\n                  'The description must not be greater than 255 characters.',\n                  $e->validator->errors()->first('description')\n              );\n      \n              return;\n          }\n      \n          $this->fail('Max length should trigger a ValidationException');\n      }\n      \n      /** @test */\n      public function max_length_succeeds_when_under_max() {\n\n          $url = 'http://';\n          $url .= str_repeat('a', 255 - strlen($url));\n      \n          $data = [\n              'title' => str_repeat('a', 255),\n              'url' => $url,\n              'description' => str_repeat('a', 255),\n          ];\n      \n          $this->post('/edit', $data);\n      \n          $this->assertDatabaseHas('blogs', $data);\n      }\n  }\n\n")])])])])])]),e._v(" "),t("li",[e._v("运行测试用例: php artisan test")])])])])])]),e._v(" "),t("h2",{attrs:{id:"在本框架中使用laravel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在本框架中使用laravel"}},[e._v("#")]),e._v(" 在本框架中使用Laravel")]),e._v(" "),t("ul",[t("li",[e._v("本框架"),t("a",{attrs:{href:"https://github.com/skygreen2001/betterlife.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("skygreen2001/betterlife"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Laravel 框架中底层使用了Symfony框架\n"),t("ul",[t("li",[e._v("如 dd() 实现使用了Symfony 的 VarDumper::dump 方法")])])]),e._v(" "),t("li",[e._v("Composer类似Java中的Maven专为解决第三方库的依赖安装使用\n"),t("ul",[t("li",[e._v("本框架通过Composer安装了Laravel库: laravel/framework，相应自动下载了Symfony的底层函数库")]),e._v(" "),t("li",[e._v("本框架核心独立实现，并未使用任何Laravel框架代码，加载Laravel库，是提供给Laravel使用者使用，兼顾两者的优势")])])]),e._v(" "),t("li",[e._v("可在根路径test.php文件中取消相关注释查看运行效果")]),e._v(" "),t("li",[e._v("在本框架中使用Laravel"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    // 可使用Laravel的Helper方法\n    // [dd()](https://laravel.com/docs/8.x/helpers#method-dd)\n    // 在Visual Studio Code编辑器里如果函数语法提示错误，需修改Visual Studio Code配置: \n    // - "intelephense.files.associations": ["*.php", "*.phtml", "*.inc", "*.module", "*.install", "*.theme", ".engine", ".profile", ".info", ".test"]\n    $value1 = "Hello";\n    $value2 = "World";\n    $value3 = "Skygreen";\n    dd($value1, $value2, $value3);\n    $v = [$value1, $value2, $value3];\n    use Symfony\\Component\\VarDumper\\VarDumper;\n    VarDumper::dump($v);\n\n    // [可使用Laravel的Collections](https://laravel.com/docs/8.x/collections)\n    // 在Visual Studio Code编辑器里如果函数语法提示错误，需修改Visual Studio Code配置: \n    // - "intelephense.files.associations": ["*.php", "*.phtml", "*.inc", "*.module", "*.install", "*.theme", ".engine", ".profile", ".info", ".test"]\n    use Illuminate\\Support\\Collection;\n    use Illuminate\\Support\\Str;\n    Collection::macro(\'toUpper\', function () {\n        return $this->map(function ($value) {\n            return Str::upper($value);\n        });\n    });\n    $collection = collect([\'first\', \'second\']);\n    $upper = $collection->toUpper();\n    echo $upper;\n')])])])])]),e._v(" "),t("h2",{attrs:{id:"部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[e._v("#")]),e._v(" 部署")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Nginx 配置: https://laravel.com/docs/8.x/deployment#nginx")]),e._v(" "),t("ul",[t("li",[e._v("网站根路径下应指向 public/index.php , 以确保网站配置文件配置项不暴露，及其它网站源码安全问题。")])])]),e._v(" "),t("li",[t("p",[e._v("生产环境性能优化")]),e._v(" "),t("ul",[t("li",[e._v("Autoloader优化: composer install --optimize-autoloader --no-dev\n"),t("ul",[t("li",[e._v("确保根路径下保留composer.lock文件")])])]),e._v(" "),t("li",[e._v("配置优化     : php artisan config:cache")]),e._v(" "),t("li",[e._v("Route加载优化: php artisan route:cache")]),e._v(" "),t("li",[e._v("View加载优化 : php artisan view:cache")])])])]),e._v(" "),t("h2",{attrs:{id:"学习资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习资料"}},[e._v("#")]),e._v(" 学习资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://laravel.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://laravel.com/docs/8.x/installation",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装Laravel"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://learnku.com/docs/laravel",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel 8 中文文档"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://laravel-news.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel News"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://laravel-news.com/your-first-laravel-application",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Your First Laravel Application"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://kinsta.com/blog/laravel-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[e._v("20 Best Laravel Tutorials"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://laravel.com/docs/8.x/valet",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel Valet"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://learnku.com/docs/laravel/8.5/valet/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Valet中文文档"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://packalyst.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Packalyst"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);